@page "/Recipe/{search}"

@using Application.Logic
@using Application.LogicInterfaces
@using Domain.Models

@layout ShowRecipeLayout

<h3>Recipe</h3>

<table class='table'>
    <thead>
    <tr>
        <th>Name</th>
        <th>Description</th>
        <th>Ingrdients</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var emp in branches)
    {
        <tr>

            <td>
                @emp.Title<input type='button' style='width:100%; height:100%;border: 2px solid black' value="Like Recipe"/>
            </td>
            <td>@emp.Description</td>
            <td >
                @for (int i = 0; i < @emp.Ingredients.Length; i++)
                {
                    <span>@emp.Ingredients[i], </span>
                }
            </td>

        </tr>
    }
    </tbody>
</table>


@code {

    [Parameter]
    public string search { get; set; }

    private List<Domain.Models.Recipe>? branches = new List<Domain.Models.Recipe>();
    private string test;
    private IRecipeLogic _recipeLogic = new RecipeLogic();


    protected override void OnParametersSet()
    {
        test = search;
    }

    protected override async Task OnInitializedAsync()
    {
        List<Recipe> recipes = new List<Recipe>();
        recipes = await _recipeLogic.GetByIngredientsAsync(search);
        branches =recipes.Where(x => x.Status.Equals(true)).ToList();
        Console.WriteLine(branches);
        branches.ForEach(Console.WriteLine);
  
    }


}

}