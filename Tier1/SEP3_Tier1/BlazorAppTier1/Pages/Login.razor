@page "/Login"
@using BlazorAppTier1.Services
@using global::Domain.Models
@inject IAuthService AuthService
@inject NavigationManager NavManager
@layout LoginLayout

<rel src="~/css/Login.css" />
<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
         <div class="mx-5 my-3 flex justify-between text-sm font-semibold underline underline-offset-2" @onclick="Home">
                <div>
                    <button>Go to Home</button>
                </div>
            </div>
            <!-- component -->
            <div class="mx-auto my-36 flex h-[300px] w-[350px] flex-col border-2 bg-white text-black shadow-xl">
                <div class="mx-8 mt-7 mb-1 flex flex-row justify-start space-x-2">
                    <div class="h-7 w-3 bg-[#ffcc00]"></div>
                    <div class="w-3 text-center font-sans text-xl font-bold">
                        <h1>Login</h1>
                    </div>
                </div>
                <div class="flex flex-col items-center">
                    <input class="my-2 w-72 border p-2" type="email" placeholder="Username" @bind="userName"/>
                </div>
                <div class="flex flex-col items-center">
                    <input class="my-2 w-72 border p-2" type="password" placeholder="Password" @bind="password"/>
                </div>
              
                <div class="my-2 flex justify-center">
                    <button class="w-72 border bg-[#ffcc00] p-2 font-sans" @onclick="LoginAsync">Login</button>
                </div>

            </div>
        </NotAuthorized>
        <Authorized>
            
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private string userName;
    private string password;
    private string errorLabel;
    private User user;

    private async Task LoginAsync()
    {
        errorLabel = "";
        try
        {
            await AuthService.LoginAsync(userName, password);
            NavManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }

    private async Task RegisterAsync()
    {
        errorLabel = "";
        try
        {
            NavManager.NavigateTo("/Register");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    }

@code
        {
    private void Home()
    {
        NavManager.NavigateTo("/Home");
    }


}
}