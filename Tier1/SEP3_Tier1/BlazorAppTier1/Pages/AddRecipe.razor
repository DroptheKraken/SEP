@page "/AddRecipe"

@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject NavigationManager NavigationManager
@inject IUserInterface _userInterface
@inject IRecipeInterface _recipeInterface
@layout LoginLayout





<div class="card">
    <div class="mx-5 my-3 flex justify-between text-sm font-semibold underline underline-offset-2" @onclick="Home">
                    <div>
                        <button>Go to Home</button>
                    </div>
                </div>
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Todo without assignee.</label>
    }
    else
    {
        <h3>Create Recipe</h3>

        <div class="form-group field bg">
            <label>Title:</label>
            <input type="text" @bind="Title"/>
            <div class="form-group field bg">
                <label>Desciption:</label>
                <input type="text" @bind="description"/>
                <div class="form-group field">
                    <label>Ingredients:</label>
                    <input type="text"  @bind="ingredients"/>


                </div>
                <div class="button-row">
                    @if (!string.IsNullOrEmpty(msg))
                    {
                        <label style="color: red">@msg</label>
                    }
                    <button @onclick="Create" class="acceptbtn">Create</button>
                </div>
                }
            </div>
        </div>

    }
</div>

@code {
    private IEnumerable<User>? users;
    private int? selectedUserId=1;
    private string Title = "";
    private string description = "";
    private string ingredients = "";
    

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await _userInterface.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {

        try
        {
            
            String[] ingredientsArray = ingredients.Split(",");
            RecipeCreationDto dto = new((int)selectedUserId, Title, description, ingredientsArray);
            await _recipeInterface.CreateAsync(dto);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    private void Home()
    {
        NavigationManager.NavigateTo("/Home");
    }
}
}