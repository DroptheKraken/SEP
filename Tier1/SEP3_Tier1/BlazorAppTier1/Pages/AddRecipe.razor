
@page "/AddRecipe"

@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject NavigationManager NavigationManager
@inject IUserInterface _userInterface
@inject IRecipeInterface _recipeInterface
@layout LoginLayout


<div class="mx-5 my-3 flex justify-between text-sm font-semibold underline underline-offset-2" @onclick="Home">
    <div>
        <button>Go to Home</button>
    </div>
</div>
<!-- component -->
<div class="mx-auto my-36 flex h-[320px] w-[350px] flex-col border-2 bg-white text-black shadow-xl">
    <div class="mx-8 mt-7 mb-1 flex flex-row justify-start space-x-2">
        <div class="h-7 w-3 bg-[#ffcc00]"></div>
        <div class="w-3 text-center font-sans text-xl font-bold">
            <h1>Recipe</h1>
        </div>

    </div>

    <div class="flex flex-col items-center">
        <input class="my-2 w-72 border p-2" type="Title" placeholder="Title" @bind="Title"/>
    </div>
    <div class="flex flex-col items-center">
        <input class="my-2 w-72 border p-2" type="Description" placeholder="Description" @bind="description"/>
    </div>
    <div class="flex flex-col items-center">
        <input class="my-2 w-72 border p-2" type="Ingredients" placeholder="Ingredients (Separated by commas)" @bind="ingredients"/>
    </div>
  <div class="flex flex-col items-center">
      @if (!string.IsNullOrEmpty(msg))
          {
              <label style="color: red">@msg</label>
          }

        </div>
    <div class="my-2 flex justify-center">
        
        <button class="w-72 border bg-[#ffcc00] p-2 font-sans" @onclick="Create">Create</button>
 
    </div>

</div>

@code {
    private IEnumerable<User>? users;
    private int? selectedUserId = 1;
    private string Title = "";
    private string description = "";
    private string ingredients = "";


    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await _userInterface.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        try
        {
            if (Title == "" || description == "" || ingredients == "")
            {
                msg = "Please fill in all fields";
            }
            else
            {
                String[] ingredientsArray = ingredients.Split(",");
                RecipeCreationDto dto = new((int)selectedUserId, Title, description, ingredientsArray);
                await _recipeInterface.CreateAsync(dto);
                NavigationManager.NavigateTo("/Recipes");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void Home()
    {
        NavigationManager.NavigateTo("/Home");
    }

}

}